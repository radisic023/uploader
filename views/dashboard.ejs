<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script defer src="/js/scripts.js"></script>
    <title>Dashboard</title>
    <style>
        :root {
            --bg-primary: #000;
            --bg-secondary: #111;
            --accent-color: rgb(0 107 179);
            --text-primary: #fff;
            --text-secondary: #999;
            --card-bg: rgba(17, 17, 17, 0.7);
            --border-color: #333;
        }

        body {
            background: var(--bg-primary);
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
        }

        .preloader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--bg-primary);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            opacity: 1;
            transition: opacity 0.4s ease;
        }

        .preloader.hidden {
            opacity: 0;
            pointer-events: none;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-top: 4px solid var(--accent-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        main.fade-in {
            opacity: 1;
            transition: opacity 0.5s ease;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .stat-card {
            background: var(--card-bg);
            padding: 1.5rem;
            border-radius: 16px;
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        }

        .stat-card h2 {
            font-size: 1.1rem;
            color: var(--text-secondary);
            margin-bottom: 1rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .stat-card p {
            font-size: 2rem;
            font-weight: 600;
            color: var(--accent-color);
            margin: 0;
        }

        h1 {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            background: linear-gradient(to right, var(--text-primary), var(--text-secondary));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        p {
            color: var(--text-secondary);
            line-height: 1.6;
        }

        .quick-actions {
            margin-top: 2rem;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .action-card {
            background: var(--card-bg);
            padding: 1.5rem;
            border-radius: 12px;
            border: 1px solid var(--border-color);
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .action-card:hover {
            transform: translateY(-3px);
            border-color: var(--accent-color);
        }

        .action-card i {
            font-size: 2rem;
            color: var(--accent-color);
            margin-bottom: 1rem;
        }

        .action-card h3 {
            color: var(--text-primary);
            margin: 0;
            font-size: 1.1rem;
        }

        .activity-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .activity-item {
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .activity-icon {
            background: var(--accent-color);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
    </style>
</head>
<body>
    <div class="preloader" id="preloader">
        <div class="spinner"></div>
    </div>

    <%- include('partials/navbar') %>

    <main class="container fade-in">
        <h1>Welcome, <%= user.username %> (<%= user.role %>)</h1>
        <p>Here's an overview of your system's current status and recent activity.</p>

        <section class="stats">
            <div class="stat-card" id="total-users">
                <h2><i class="fas fa-users"></i> Total Users</h2>
                <p>Loading...</p>
            </div>
            <div class="stat-card" id="total-files">
                <h2><i class="fas fa-file"></i> Total Files</h2>
                <p>Loading...</p>
            </div>
            <div class="stat-card" id="active-links">
                <h2><i class="fas fa-link"></i> Active Links</h2>
                <p>Loading...</p>
            </div>
        </section>

        <section class="quick-actions">
            <div class="action-card" onclick="window.location.href='/users'">
                <i class="fas fa-user-cog"></i>
                <h3>Manage Users</h3>
            </div>
            <div class="action-card" onclick="window.location.href='/manage'">
                <i class="fas fa-folder-open"></i>
                <h3>File Manager</h3>
            </div>
            <div class="action-card" onclick="window.location.href='/logs'">
                <i class="fas fa-history"></i>
                <h3>View Logs</h3>
            </div>
        </section>

        <!-- mehr, e.g recent activity @Springi -->
    </main>

    <script>
        async function fetchStats() {
            try {
                const usersResponse = await fetch('/users');
                const usersHtml = await usersResponse.text();
                const usersDom = new DOMParser().parseFromString(usersHtml, 'text/html');
                const totalUsers = usersDom.querySelectorAll('.user-card').length;

                const filesResponse = await fetch('/manage'); 
                const filesHtml = await filesResponse.text();
                const filesDom = new DOMParser().parseFromString(filesHtml, 'text/html');
                const totalFiles = filesDom.querySelectorAll('.file-card').length;
                const activeLinks = filesDom.querySelectorAll('.file-status.active').length;

                const elements = {
                    totalUsers: document.querySelector('#total-users p'),
                    totalFiles: document.querySelector('#total-files p'),
                    activeLinks: document.querySelector('#active-links p')
                };

                const data = {
                    totalUsers,
                    totalFiles, 
                    activeLinks
                };

                for (const [key, element] of Object.entries(elements)) {
                    if (element) {
                        const targetValue = data[key];
                        const currentValue = parseInt(element.textContent) || 0;
                        animateNumber(element, currentValue, targetValue);
                    }
                }
            } catch (error) {
                console.error('Error fetching stats:', error);
                document.querySelectorAll('.stat-card p').forEach(el => {
                    el.textContent = 'Error loading data';
                });
            }
        }

        function animateNumber(element, start, end) {
            if (isNaN(end)) return;
            
            const duration = 1000;
            const startTime = performance.now();
            
            function update(currentTime) {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1);
                
                const value = Math.floor(start + (end - start) * progress);
                element.textContent = value.toLocaleString();
                
                if (progress < 1) {
                    requestAnimationFrame(update);
                }
            }
            
            requestAnimationFrame(update);
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchStats();
            
            setTimeout(() => {
                const preloader = document.getElementById('preloader');
                if (preloader) {
                    preloader.classList.add('hidden');
                    setTimeout(() => preloader.remove(), 400);
                }
            }, 500);
            
            setInterval(fetchStats, 10000);
        });
    </script>
</body>
</html>
